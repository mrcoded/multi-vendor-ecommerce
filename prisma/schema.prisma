// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Coupon {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  couponCode String
  expiryDate DateTime
  isActive   Boolean

  vendor   User   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId String @db.ObjectId

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Banner {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  link      String
  imageUrl  String
  isActive  Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  imageUrl    String?
  description String?
  isActive    Boolean

  products      Product[]
  communityPost CommunityPost[]

  storeIds String[] @db.ObjectId
  stores   Store[]  @relation(fields: [storeIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Store {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  imageUrl    String?
  description String?
  isActive    Boolean

  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Product {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  slug              String   @unique
  imageUrl          String?
  productImages     String[]
  description       String?
  isActive          Boolean
  isWholesale       Boolean
  sku               String?
  qty               Int?
  barcode           String?
  productPrice      Float
  productCode       String?
  salePrice         Float
  tags              String[]
  wholesaleQuantity Int
  wholesalePrice    Float

  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String    @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  OrderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
  sales      Sale[]
}

model VendorProfile {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  code               String
  contactPerson      String?
  contactPersonPhone String?
  imageUrl           String?
  email              String
  firstName          String
  lastName           String
  notes              String?
  phone              String
  physicalAddress    String?
  terms              String?
  isActive           Boolean
  products           String[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.ObjectId

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model CommunityPost {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  imageUrl    String?
  description String?
  content     String?
  isActive    Boolean

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  USER
  VENDOR
  MODERATOR
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model UserProfile {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @unique @db.ObjectId
  // Personal Details
  name          String?
  firstName     String?
  lastName      String?
  email         String?
  userName      String?
  phone         String?
  // Shipping Details
  streetAddress String?
  city          String?
  country       String?
  district      String?
  dateOfBirth   DateTime?
  profileImage  String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String? @unique
  password          String
  imageUrl          String?
  emailVerified     Boolean @default(false)
  verificationToken String?

  products Product[]
  Coupon   Coupon[]

  sales  Sale[]
  orders Order[]

  plan          String?
  role          UserRole       @default(USER)
  profile       UserProfile?
  vendorProfile VendorProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  userId        String  @db.ObjectId
  // Personal Details
  firstName     String
  lastName      String
  emailAddress  String
  phone         String
  // Shipping Details
  streetAddress String
  city          String
  country       String
  district      String
  shippingCost  Float
  orderNumber   String?

  //Payment Method
  paymentMethod String
  // paymentToken  String

  //Order Status
  orderStatus OrderStatus @default(PROCESSING)

  //Order Items
  orderItems OrderItem[]
  sales      Sale[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  productId String  @db.ObjectId
  vendorId  String  @db.ObjectId
  imageUrl  String?
  title     String?
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sale {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String  @db.ObjectId
  productId       String  @db.ObjectId
  vendorId        String  @db.ObjectId
  productImageUrl String?
  productTitle    String?
  productPrice    Float?
  productQty      Int?
  total           Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  vendor  User    @relation(fields: [vendorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
